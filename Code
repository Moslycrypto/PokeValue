""import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Trash2 } from 'lucide-react';

const PokemonCardValuation = () => {
  const [cardName, setCardName] = useState('');
  const [edition, setEdition] = useState('');
  const [condition, setCondition] = useState('');
  const [valuation, setValuation] = useState(null);
  const [loading, setLoading] = useState(false);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    const storedHistory = JSON.parse(localStorage.getItem('valuationHistory')) || [];
    setHistory(storedHistory);
  }, []);

  const handleSubmit = async () => {
    setLoading(true);
    try {
      const response = await fetch('https://api.openai.com/v1/engines/gpt-4/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer YOUR_OPENAI_API_KEY`
        },
        body: JSON.stringify({
          prompt: `Ermittle den Wert einer Pokémon-Karte mit folgenden Angaben:
          - Name: ${cardName}
          - Edition: ${edition}
          - Zustand: ${condition}
          
          Gib mir bitte den aktuellen Marktwert, den letzten Verkaufspreis, den erwarteten Höchstwert und den Markttrend zurück.`,
          max_tokens: 150
        }),
      });

      if (!response.ok) {
        throw new Error('Fehler bei der API-Anfrage');
      }

      const data = await response.json();
      
      const newValuation = {
        cardName,
        edition,
        condition,
        price: '€120',
        marketTrend: 'Steigend',
        lastSold: '€115',
        estimatedHigh: '€150',
        date: new Date().toLocaleString()
      };

      setValuation(newValuation);
      const updatedHistory = [newValuation, ...history];
      setHistory(updatedHistory);

      localStorage.setItem('valuationHistory', JSON.stringify(updatedHistory));
    } catch (error) {
      console.error('Fehler bei der Analyse:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (index) => {
    const updatedHistory = history.filter((_, i) => i !== index);
    setHistory(updatedHistory);
    localStorage.setItem('valuationHistory', JSON.stringify(updatedHistory));
  };

  return (
    <div className="p-10 space-y-5">
      <h1 className="text-3xl font-bold mb-5 text-center">Pokémon Karten Bewertung</h1>

      <Card className="p-5">
        <CardContent className="space-y-3">
          <Input 
            placeholder="Kartenname (z.B. Pikachu VMAX)" 
            value={cardName} 
            onChange={(e) => setCardName(e.target.value)} 
          />
          <Input 
            placeholder="Edition (z.B. Sword & Shield)" 
            value={edition} 
            onChange={(e) => setEdition(e.target.value)} 
          />
          <Input 
            placeholder="Zustand (z.B. Near Mint)" 
            value={condition} 
            onChange={(e) => setCondition(e.target.value)} 
          />
          <Button onClick={handleSubmit} disabled={loading} className="bg-blue-500 hover:bg-blue-600 text-white">
            {loading ? 'Analysiere...' : 'Wert analysieren'}
          </Button>
        </CardContent>
      </Card>

      {valuation && (
        <Card className="p-5 bg-green-100">
          <CardContent className="space-y-3">
            <h2 className="text-xl font-bold">Analyse Ergebnis:</h2>
            <p><strong>Geschätzter Wert:</strong> {valuation.price}</p>
            <p><strong>Markttrend:</strong> {valuation.marketTrend}</p>
            <p><strong>Zuletzt verkauft für:</strong> {valuation.lastSold}</p>
            <p><strong>Erwarteter Höchstwert:</strong> {valuation.estimatedHigh}</p>
            <p><strong>Datum der Analyse:</strong> {valuation.date}</p>
          </CardContent>
        </Card>
      )}

      <Card className="p-5">
        <CardContent>
          <h2 className="text-xl mb-4">Verlauf der Bewertungen</h2>
          {history.length > 0 ? (
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th>Kartenname</th>
                  <th>Edition</th>
                  <th>Zustand</th>
                  <th>Wert</th>
                  <th>Markttrend</th>
                  <th>Datum</th>
                  <th>Aktion</th>
                </tr>
              </thead>
              <tbody>
                {history.map((entry, index) => (
                  <tr key={index} className="border-b">
                    <td>{entry.cardName}</td>
                    <td>{entry.edition}</td>
                    <td>{entry.condition}</td>
                    <td>{entry.price}</td>
                    <td>{entry.marketTrend}</td>
                    <td>{entry.date}</td>
                    <td>
                      <Button onClick={() => handleDelete(index)} className="bg-red-500 hover:bg-red-600 text-white">
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>Noch keine Bewertungen gespeichert.</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default PokemonCardValuation;
""
const response = await fetch('https://api.openai.com/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
  },
  body: JSON.stringify({
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content: "Du bist ein Pokémon-Kartenwert-Analyst."
      },
      {
        role: "user",
        content: `Ermittle den Wert einer Pokémon-Karte mit folgenden Angaben:
        - Name: ${cardName}
        - Edition: ${edition}
        - Zustand: ${condition}
        
        Gib mir bitte den aktuellen Marktwert, den letzten Verkaufspreis, den erwarteten Höchstwert und den Markttrend zurück.`
      }
    ],
    max_tokens: 150
  })
});
